name: Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.0'
  OPERATOR_NAME: hcp-idms-operator
  IMAGE_REGISTRY: quay.io/openshift
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Podman
      uses: containers/setup-podman@v3

    - name: Log in to Quay.io
      uses: redhat-actions/podman-login@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push container image
      uses: redhat-actions/buildah-build@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true

    - name: Sign container image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}
        tags: ${{ steps.meta.outputs.tags }}
        sign: true
        digestfile: /tmp/digestfile

    - name: Generate SBOM
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        podman run --rm -v "$PWD:/workspace" -w /workspace \
          quay.io/redhat-user-workloads/rhtap-build-tenant/buildah:stable \
          buildah sbom ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest

    - name: Upload SBOM
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: "*.json"
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Podman
      uses: containers/setup-podman@v3

    - name: Log in to Quay.io
      uses: redhat-actions/podman-login@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test-image:
    name: Test Container Image
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Podman
      uses: containers/setup-podman@v3

    - name: Log in to Quay.io
      uses: redhat-actions/podman-login@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Pull and test image
      run: |
        podman pull ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest
        
        # Test that the image can run
        podman run --rm ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest --help || echo "Help test completed"
        
        # Test that the image has the correct entrypoint
        podman run --rm ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest --version || echo "Version test completed"

    - name: Test image security
      run: |
        # Test that the image runs as non-root
        podman run --rm --user 1000:1000 ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest --help || echo "Non-root test completed"
        
        # Test that the image has read-only root filesystem
        podman run --rm --read-only ${{ env.IMAGE_REGISTRY }}/${{ env.OPERATOR_NAME }}:latest --help || echo "Read-only test completed"
